一、创建store
和客户端不同，服务端需要在接收请求后创建store，所以createStore.js返回一个函数，并在index.js中接收到请求后调用，然后把生成的store传递给renderer函数。
二、配置store。
在renderer.js中，引入Provider标签，使用传入的store，使其全局可见
三、服务器端store数据填充
问题：服务器端创建的store是空的，组件并不能从store中获取到任何数据
解决：服务器端在渲染组件之前获取到组件所需要的数据
步骤：
1. 在组件中添加loadData方法，此方法用于获取组件所需数据，方法被服务器端调用
2. 将loadData方法保存在当前组件的路由信息对象中
3. 服务器端在接收到请求后，根据请求地址匹配出要渲染的组件的路由信息
4. 从路由信息中获取组件中的loadData方法并调用方法获取组件所需数据
5. 当数据获取完成以后再渲染组件并将结果响应到客户端
四、React警告消除(两端冲突)
原因：客户端store再初始状态下是没有数据的，在渲染组件的时候生成的是空ul，但是服务器端先获取数据再进行的组件渲染，所以生成的是有子元素的ul，hydrate方法在对比的时候发现两者不一致，所以报警。
解决：将服务器端获取到的数据回填给客户端，让客户但拥有初始数据。
